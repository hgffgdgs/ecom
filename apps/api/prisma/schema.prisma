generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  email        String   @unique
  phone        String?  @unique
  passwordHash String
  firstName    String?
  lastName     String?
  role         Role     @default(CUSTOMER)
  isVerified   Boolean  @default(false)
  vendor       Vendor?
  company      Company?
  orders       Order[]
  reviews      Review[]
  cart         Cart?
}

model Vendor {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  displayName   String
  kycStatus     KycStatus @default(PENDING)
  wallet        Wallet?
  products      Product[]
  vendorOrders  VendorOrder[]
}

model Company {
  id            String   @id @default(cuid())
  name          String
  taxId         String?
  accountOwner  String   @unique
  owner         User     @relation(fields: [accountOwner], references: [id])
  quotes        Quote[]
}

model Wallet {
  id            String   @id @default(cuid())
  vendorId      String   @unique
  vendor        Vendor   @relation(fields: [vendorId], references: [id])
  balanceCents  Int      @default(0)
  transactions  Transaction[]
}

model Transaction {
  id            String   @id @default(cuid())
  walletId      String
  wallet        Wallet   @relation(fields: [walletId], references: [id])
  createdAt     DateTime @default(now())
  amountCents   Int
  type          TransactionType
  reference     String?
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  parentId    String?
  parent      Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
}

model Product {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String
  slug           String   @unique
  description    String
  images         Json
  basePriceCents Int
  currency       Currency @default(XOF)
  stock          Int      @default(0)
  vendorId       String?
  vendor         Vendor?  @relation(fields: [vendorId], references: [id])
  categoryId     String
  category       Category @relation(fields: [categoryId], references: [id])
  variants       Variant[]
  reviews        Review[]
  cartItems      CartItem[]
  orderItems     OrderItem[]
  quoteItems     QuoteItem[]
}

model Variant {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  sku        String   @unique
  name       String
  priceCents Int
  stock      Int      @default(0)
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model Review {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
}

model Cart {
  id     String   @id @default(cuid())
  userId String   @unique
  user   User     @relation(fields: [userId], references: [id])
  items  CartItem[]
}

model CartItem {
  id         String   @id @default(cuid())
  cartId     String
  cart       Cart     @relation(fields: [cartId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  variantId  String?
  variant    Variant? @relation(fields: [variantId], references: [id])
  quantity   Int      @default(1)
  priceCents Int
}

model Order {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(UNPAID)
  currency        Currency      @default(XOF)
  totalCents      Int
  items           OrderItem[]
  shippingAddress Json
  billingAddress  Json
  paymentMethod   PaymentMethod
  transactions    Payment[]
  vendorOrders    VendorOrder[]
}

model OrderItem {
  id             String  @id @default(cuid())
  orderId        String
  order          Order   @relation(fields: [orderId], references: [id])
  productId      String
  product        Product @relation(fields: [productId], references: [id])
  variantId      String?
  variant        Variant? @relation(fields: [variantId], references: [id])
  quantity       Int
  unitPriceCents Int
}

model VendorOrder {
  id       String @id @default(cuid())
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id])
  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id])
  status   OrderStatus @default(PENDING)
}

model Payment {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  createdAt   DateTime @default(now())
  provider    PaymentProvider
  method      PaymentMethod
  amountCents Int
  currency    Currency
  status      PaymentStatus
  reference   String?
}

model Coupon {
  id            String   @id @default(cuid())
  code          String   @unique
  discountPct   Int?
  discountCents Int?
  maxUses       Int?
  usedCount     Int      @default(0)
  startsAt      DateTime?
  endsAt        DateTime?
}

model Promotion {
  id          String   @id @default(cuid())
  name        String
  description String?
  startsAt    DateTime?
  endsAt      DateTime?
}

model Quote {
  id        String   @id @default(cuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  status    QuoteStatus @default(DRAFT)
  items     QuoteItem[]
}

model QuoteItem {
  id             String   @id @default(cuid())
  quoteId        String
  quote          Quote    @relation(fields: [quoteId], references: [id])
  productId      String
  product        Product  @relation(fields: [productId], references: [id])
  quantity       Int
  unitPriceCents Int
}

enum Role {
  ADMIN
  MANAGER
  SUPPORT
  VENDOR
  CUSTOMER
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Currency {
  XOF
  EUR
  USD
}

enum PaymentMethod {
  CASH
  MOBILE_MONEY
  CARD
}

enum PaymentProvider {
  MOCK
  CASH_IN_HAND
  MTN_ORANGE_STRIPE
}

enum PaymentStatus {
  UNPAID
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum QuoteStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
}

